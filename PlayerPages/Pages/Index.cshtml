@page "{id}"
@using Microsoft.FSharp.Core
@model PlayerPages.Pages.IndexModel
<!DOCTYPE html>
<html class="application">
<head>
    <title>@Model.PageProperties.title</title>
    <link rel="stylesheet" href="css/main.css" />
    <link rel="stylesheet" href="material-icons/iconfont/material-icons.css" />
    <base href="@(Request.Scheme)://@(Request.Host)/" />
    <meta http-equiv="X-UA-Compatible" content="IE=5" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
</head>
<body>
    @foreach (var embed in Model.PageProperties.top)
    {
        @await Html.PartialAsync("Embed", embed)
    }
    <!--[if !IE]><!-->
    <details id="menu">
        <summary>Menu</summary>
        @foreach (var media in Model.PageProperties.media)
        {
            <div class="row">
                @* This link will open the media URL in a new tab if JavaScript is not loaded *@
                @* If JavaScript is loaded, this will open the media in a PPSPlayer *@
                <a class="media" target="_blank" href="@media.src">@media.title</a>
            </div>
        }
        @foreach (var link in Model.PageProperties.links)
        {
            <div class="row">
                <a href="@link.href" target="_blank">@link.title</a>
            </div>
        }
    </details>
    <!--<![endif]-->
    <!--[if IE]>
    @* Include an ActiveX control (for Internet Explorer) *@
    @* The header on this page sets all Internet Explorer versions to emulate Internet Explorer 5, for consistency *@
    @* <embed> tag could be used to support Netscape + VLC, but causes issues with TenFourFox *@
    @foreach (var media in Model.PageProperties.media)
    {
        <h2>@media.title</h2>
        <object classid="clsid:9BE31822-FDAD-461B-AD51-BE1D1C159921" width="640" height="320">
            <param name="src" value="@media.src" />
            <param name="autoplay" value="false" />
        </object>
    }
    <![endif]-->
    <div id="center-row">
        @if (!Model.PageProperties.left.IsEmpty)
        {
            <div class="embed-column">
                @foreach (var embed in Model.PageProperties.left)
                {
                    @await Html.PartialAsync("Embed", embed)
                }
            </div>
        }
        <main>
            <div id="video-parent">
                <p>
                    Use the menu above to select media to play.
                </p>
            </div>
            <!-- ko with: player -->
            @* The controls are hidden initially, and shown once Knockout has been loaded. *@
            <div class="controlgroup" style="display: none" data-bind="visible: true">
                <div class="controls" data-bind="if: levelPickerActive">
                    <div class="status line-separator">
                        Quality:
                    </div>
                    <!-- ko foreach: levels -->
                    <button data-bind="click: activate, text: name" style="flex: 0 1 auto"></button>
                    <!-- /ko -->
                    <button data-bind="click: hideLevelPicker">
                        <span class="material-icons" aria-hidden="true">close</span>
                        <span class="sr-only">Close</span>
                    </button>
                </div>
                <div class="controlgroup">
                    @* These controls are hidden if the user enables native HTML controls on the video element (Shift + right-click in Firefox). *@
                    <div class="controls">
                        <button data-bind="click: togglePlay">
                            <!-- ko if: playing -->
                            <span class="material-icons" aria-hidden="true">pause</span>
                            <span class="sr-only">Pause</span>
                            <!-- /ko -->
                            <!-- ko ifnot: playing -->
                            <span class="material-icons" aria-hidden="true">play_arrow</span>
                            <span class="sr-only">Play</span>
                            <!-- /ko -->
                        </button>
                        <div class="line-separator sr-only">
                            <hr />
                        </div>
                        <!-- ko if: live -->
                        <div class="status line-separator">
                            Live
                        </div>
                        <!-- /ko -->
                        <div class="spacer" role="none"></div>
                        <button data-bind="visible: hasSubtitles, click: toggleSubtitles">
                            <!-- ko ifnot: currentSubtitleTrack() -->
                            <span class="material-icons" aria-hidden="true">subtitles_off</span>
                            <!-- /ko -->
                            <!-- ko if: currentSubtitleTrack() -->
                            <span class="material-icons" aria-hidden="true">subtitles</span>
                            <!-- /ko -->
                            <span class="sr-only">Toggle subtitles</span>
                        </button>
                        <button data-bind="click: toggleMute">
                            <!-- ko if: muted -->
                            <span class="material-icons" aria-hidden="true">volume_off</span>
                            <span class="sr-only">Unmute</span>
                            <!-- /ko -->
                            <!-- ko ifnot: muted -->
                            <span class="material-icons" aria-hidden="true">volume_up</span>
                            <span class="sr-only">Mute</span>
                            <!-- /ko -->
                        </button>
                        <div class="status line-separator sr-only">
                            Volume
                        </div>
                        <input type="range"
                               id="volume"
                               data-bind="value: vol"
                               min="0"
                               max="1"
                               aria-label="Volume"
                               step="0.1" />
                        <div class="line-separator"></div>
                        @* These two buttons are presented to screen readers, but are hidden from view unless you use the Tab key to reveal them. *@
                        <button class="adv">
                            <span class="material-icons" aria-hidden="true">add</span>
                            <span class="sr-only">Volume up</span>
                        </button>
                        <button class="adv">
                            <span class="material-icons" aria-hidden="true">remove</span>
                            <span class="sr-only">Volume down</span>
                        </button>
                        @* This button reveals the quality level picker (again), which hides the rest of the controls. *@
                        <button data-bind="visible: levels().length > 1, click: showLevelPicker">
                            <span class="material-icons" aria-hidden="true">hd</span>
                            <span class="sr-only">Select quality level</span>
                        </button>
                        <button>
                            @* TODO: This button should request to start Google Cast, which should then trigger the player to switch modes *@
                            @* Should be hidden if not supported in browser *@
                            <span class="material-icons" aria-hidden="true">cast</span>
                            <span class="sr-only">Cast</span>
                        </button>
                        <button>
                            @* TODO: This button should show the Safari/iOS AirPlay dialog *@
                            @* Should be hidden if not supported in browser *@
                            <span class="material-icons" aria-hidden="true">airplay</span>
                            <span class="sr-only">AirPlay</span>
                        </button>
                        <button data-bind="click: toggleFullscreen">
                            @* TODO: This button should be hidden if the fullscreen browser API is not supported *@
                            <!-- ko if: fullscreen -->
                            <span class="material-icons" aria-hidden="true">fullscreen_exit</span>
                            <span class="sr-only">Exit full screen</span>
                            <!-- /ko -->
                            <!-- ko ifnot: fullscreen -->
                            <span class="material-icons" aria-hidden="true">fullscreen</span>
                            <span class="sr-only">Full screen</span>
                            <!-- /ko -->
                        </button>
                    </div>
                    <div class="controls" data-bind="ifnot: live">
                        <div class="status timestamp line-separator">
                            <span class="sr-only">Timestamp:</span>
                            <span data-bind="text: currentTimeStr">0:00</span>
                        </div>
                        <input type="range"
                               aria-label="Time"
                               id="seek"
                               data-bind="value: currentTimeMs, attr: { min: 0, max: durationMs }" />
                        <div class="status timestamp line-separator">
                            <span class="sr-only">Duration:</span>
                            <span data-bind="text: durationStr">0:00</span>
                        </div>
                        @* These buttons are presented to screen readers, but are hidden from view unless you use the Tab key to reveal them. *@
                        <button class="adv" data-bind="click: back10">
                            <span class="material-icons" aria-hidden="true">replay_10</span>
                            <span class="sr-only">Back 10 seconds</span>
                        </button>
                        <button class="adv" data-bind="click: forward10">
                            <span class="material-icons" aria-hidden="true">forward_10</span>
                            <span class="sr-only">Forward 10 seconds</span>
                        </button>
                        <button class="adv" data-bind="click: back30">
                            <span class="material-icons" aria-hidden="true">replay_30</span>
                            <span class="sr-only">Back 30 seconds</span>
                        </button>
                        <button class="adv" data-bind="click: forward30">
                            <span class="material-icons" aria-hidden="true">forward_30</span>
                            <span class="sr-only">Forward 30 seconds</span>
                        </button>
                    </div>
                </div>
            </div>
            <!-- /ko -->
        </main>
        @if (!Model.PageProperties.right.IsEmpty)
        {
            <div class="embed-column">
                @foreach (var embed in Model.PageProperties.right)
                {
                    @await Html.PartialAsync("Embed", embed)
                }
            </div>
        }
    </div>
    <script src="lib/knockout/build/output/knockout-latest.debug.js"></script>
    <script src="lib/npo.js"></script>
    <script src="lib/fetch/dist/fetch.umd.js"></script>
    <script src="lib/hls.js/hls.min.js"></script>
    <script type="text/javascript" src="js/pps-player.js"></script>
    <script type="text/javascript" src="js/html-player.js"></script>
    <script type="text/javascript" src="js/hls-player.js"></script>
    <script type="text/javascript" src="js/main.js"></script>
</body>
</html>
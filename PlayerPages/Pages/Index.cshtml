@page "{id}"
@using Microsoft.FSharp.Core
@model PlayerPages.Pages.IndexModel
<!DOCTYPE html>
<html class="application">
<head>
    <title>@Model.PageProperties.title</title>
    <link rel="stylesheet" href="css/main.css" />
    <link href="//fonts.googleapis.com/css2?family=Material+Icons" rel="stylesheet" />
    <base href="@(Request.Scheme)://@(Request.Host)/" />
    <meta http-equiv="X-UA-Compatible" content="IE=5" />
</head>
<body>
    @foreach (var embed in Model.PageProperties.top)
    {
        @await Html.PartialAsync("Embed", embed)
    }
    <details id="menu">
        <summary>Menu</summary>
        @foreach (var media in Model.PageProperties.media)
        {
            <a class="media" href="@media.HttpSrc" data-src="@media.src">@media.title</a>
        }
        @foreach (var link in Model.PageProperties.links)
        {
            <a href="@link.href" target="_blank">@link.title</a>
        }
    </details>
    <div id="center-row">
        @if (!Model.PageProperties.left.IsEmpty) {
            <div class="embed-column">
                @foreach (var embed in Model.PageProperties.left)
                {
                    @await Html.PartialAsync("Embed", embed)
                }
            </div>
        }
        <main>
            <div id="video-parent">
                <!-- ko if: false -->
                @foreach (var media in Model.PageProperties.media)
                {
                    <h1>@media.title</h1>
                    <object classid="clsid:9BE31822-FDAD-461B-AD51-BE1D1C159921" width="640" height="320">
                        <param name="src" value="@media.HttpSrc" />
                        <param name="autoplay" value="false" />

                        <video controls src="@media.src"></video>
                    </object>
                }
                <!-- /ko -->
            </div>
            <!-- ko with: controllablePlayer -->
            <div class="controls" style="display: none" data-bind="visible: true">
                <button data-bind="click: togglePlay">
                    <!-- ko if: playing -->
                    <span class="material-icons" aria-hidden="true">pause</span>
                    <span class="sr-only">Pause</span>
                    <!-- /ko -->
                    <!-- ko ifnot: playing -->
                    <span class="material-icons" aria-hidden="true">play_arrow</span>
                    <span class="sr-only">Play</span>
                    <!-- /ko -->
                </button>
                <!-- ko if: live -->
                <div class="status line-separator">
                    Live
                </div>
                <!-- /ko -->
                <!-- ko ifnot: live -->
                <button class="adv" data-bind="click: back10">
                    <span class="material-icons" aria-hidden="true">replay_10</span>
                    <span class="sr-only">Back 10 seconds</span>
                </button>
                <button class="adv" data-bind="click: forward10">
                    <span class="material-icons" aria-hidden="true">forward_10</span>
                    <span class="sr-only">Forward 10 seconds</span>
                </button>
                <button class="adv" data-bind="click: back30">
                    <span class="material-icons" aria-hidden="true">replay_30</span>
                    <span class="sr-only">Back 30 seconds</span>
                </button>
                <button class="adv" data-bind="click: forward30">
                    <span class="material-icons" aria-hidden="true">forward_30</span>
                    <span class="sr-only">Forward 30 seconds</span>
                </button>
                <!-- /ko -->
                <div class="spacer" role="none"></div>
                <button data-bind="visible: hasSubtitles, click: toggleSubtitles">
                    <!-- ko ifnot: currentSubtitleTrack() -->
                    <span class="material-icons" aria-hidden="true">subtitles_off</span>
                    <!-- /ko -->
                    <!-- ko if: currentSubtitleTrack() -->
                    <span class="material-icons" aria-hidden="true">subtitles</span>
                    <!-- /ko -->
                    <span class="sr-only">Toggle subtitles</span>
                </button>
                <button data-bind="click: toggleMute">
                    <!-- ko if: muted -->
                    <span class="material-icons" aria-hidden="true">volume_off</span>
                    <span class="sr-only">Unmute</span>
                    <!-- /ko -->
                    <!-- ko ifnot: muted -->
                    <span class="material-icons" aria-hidden="true">volume_up</span>
                    <span class="sr-only">Mute</span>
                    <!-- /ko -->
                </button>
                <div class="status line-separator sr-only">
                    Volume
                </div>
                <input type="range"
                       id="volume"
                       data-bind="value: vol"
                       min="0"
                       max="1"
                       aria-label="Volume"
                       step="0.1" />
                <div class="line-separator"></div>
                <button class="adv">
                    <span class="material-icons" aria-hidden="true">add</span>
                    <span class="sr-only">Volume up</span>
                </button>
                <button class="adv">
                    <span class="material-icons" aria-hidden="true">remove</span>
                    <span class="sr-only">Volume down</span>
                </button>
                <button>
                    @* This button should request to start Google Cast, which should then trigger the player to switch modes *@
                    @* Should be hidden if not supported in browser *@
                    <span class="material-icons" aria-hidden="true">cast</span>
                    <span class="sr-only">Cast</span>
                </button>
                <button>
                    @* This button should show the Safari/iOS AirPlay dialog *@
                    @* Should be hidden if not supported in browser *@
                    <span class="material-icons" aria-hidden="true">airplay</span>
                    <span class="sr-only">AirPlay</span>
                </button>
                <button data-bind="click: toggleFullscreen">
                    <!-- ko if: fullscreen -->
                    <span class="material-icons" aria-hidden="true">fullscreen_exit</span>
                    <span class="sr-only">Exit full screen</span>
                    <!-- /ko -->
                    <!-- ko ifnot: fullscreen -->
                    <span class="material-icons" aria-hidden="true">fullscreen</span>
                    <span class="sr-only">Full screen</span>
                    <!-- /ko -->
                </button>
            </div>
            <div class="controls" style="display: none" data-bind="visible: true">
                <div class="status timestamp line-separator">
                    <span class="sr-only">Timestamp:</span>
                    <span data-bind="text: currentTimeStr">0:00</span>
                </div>
                <input type="range"
                       aria-label="Time"
                       id="seek"
                       data-bind="value: currentTimeMs, attr: { min: 0, max: durationMs }" />
                <div class="status timestamp line-separator">
                    <span class="sr-only">Duration:</span>
                    <span data-bind="text: durationStr">0:00</span>
                </div>
            </div>
            <!-- /ko -->
        </main>
        @if (!Model.PageProperties.right.IsEmpty) {
            <div class="embed-column">
                @foreach (var embed in Model.PageProperties.right)
                {
                    @await Html.PartialAsync("Embed", embed)
                }
            </div>
        }
    </div>
    <script src="//cdnjs.cloudflare.com/ajax/libs/native-promise-only/0.8.1/npo.js"
            integrity="sha512-3jgJm59psJUhwwOYcv45UOT7MJ41Ol/Z/tzlQLK5BPrVz5mAbPrqZQyASfYgfGuaYRIZDX1EJxbJE5+V2+AG7w=="
            crossorigin="anonymous"
            referrerpolicy="no-referrer"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/knockout/3.5.1/knockout-latest.js"
            integrity="sha512-2AL/VEauKkZqQU9BHgnv48OhXcJPx9vdzxN1JrKDVc4FPU/MEE/BZ6d9l0mP7VmvLsjtYwqiYQpDskK9dG8KBA=="
            crossorigin="anonymous"
            referrerpolicy="no-referrer"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/hls.js/1.5.8/hls.min.js"
            integrity="sha512-ssuZ9opY3Aw25iwD+vAvLlR5KM5zS1e2J+dCkGnTKEi0a+AvTg3OveST0rfQUdEzmV5WJ8OSHgHvgUIpBiqVRQ=="
            crossorigin="anonymous"
            referrerpolicy="no-referrer"></script>
    <script type="text/javascript" src="js/pps-player.js"></script>
    <script type="text/javascript" src="js/hls-player.js"></script>
    <script type="text/javascript" src="js/main.js"></script>
</body>
</html>